# Project Structure (Combined Files)

- index.html
- package.json
- src\App.css
- src\App.jsx
- src\assets\react.svg
- src\components\Spreadsheet.jsx
- src\index.css
- tailwind.config.js



>>> FILE START: index.html [type=html]
========================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

========================================
<<< FILE END: index.html

>>> FILE START: package.json [type=json]
========================================
{
  "name": "spreadsheet-llm-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.9.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@tailwindcss/postcss": "^4.1.6",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.6",
    "vite": "^6.3.5"
  }
}

========================================
<<< FILE END: package.json

>>> FILE START: src\App.css [type=css]
========================================
/* Remove default styles that conflict with Tailwind */
#root {
  width: 100%;
  height: 100vh;
  margin: 0;
  padding: 0;
  text-align: left;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

========================================
<<< FILE END: src\App.css

>>> FILE START: src\App.jsx [type=jsx]
========================================
import './App.css'
import Spreadsheet from './components/Spreadsheet'

const styles = {
  container: {
    minHeight: '100vh',
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: '#f9fafb'
  },
  header: {
    backgroundColor: 'white',
    boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)'
  },
  headerContent: {
    maxWidth: '80rem',
    margin: '0 auto',
    padding: '1rem 1rem',
  },
  headerTitle: {
    fontSize: '1.25rem',
    fontWeight: '600',
    color: '#111827'
  },
  main: {
    flex: '1',
    overflow: 'hidden'
  },
  mainContent: {
    height: '100%',
    maxWidth: '80rem',
    margin: '0 auto',
    padding: '0 1.5rem'
  },
  footer: {
    backgroundColor: 'white',
    borderTop: '1px solid #e5e7eb'
  },
  footerContent: {
    maxWidth: '80rem',
    margin: '0 auto',
    padding: '0.75rem 1rem',
  },
  footerText: {
    fontSize: '0.875rem',
    color: '#6b7280',
    textAlign: 'center'
  }
};

function App() {
  return (
    <div style={styles.container}>
      <header style={styles.header}>
        <div style={styles.headerContent}>
          <h1 style={styles.headerTitle}>CharacterQuilt Smart Spreadsheet</h1>
        </div>
      </header>
      <main style={styles.main}>
        <div style={styles.mainContent}>
          <Spreadsheet />
        </div>
      </main>
      <footer style={styles.footer}>
        <div style={styles.footerContent}>
          <p style={styles.footerText}>
            Built for CharacterQuilt Interview Assessment • {new Date().getFullYear()}
          </p>
        </div>
      </footer>
    </div>
  )
}

export default App

========================================
<<< FILE END: src\App.jsx

>>> FILE START: src\assets\react.svg [type=svg]
========================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
========================================
<<< FILE END: src\assets\react.svg

>>> FILE START: src\components\Spreadsheet.jsx [type=jsx]
========================================
import React, { useState, useEffect, useRef, useMemo } from 'react';
import axios from 'axios';

// Define styles object for inline styling
const styles = {
  container: {
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: 'white'
  },
  header: {
    backgroundColor: 'white',
    borderBottom: '1px solid #e5e7eb',
    padding: '0.75rem 1.5rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  headerTitle: {
    fontSize: '1.125rem',
    fontWeight: '600',
    color: '#1f2937'
  },
  errorMessage: {
    backgroundColor: '#fee2e2',
    border: '1px solid #fecaca',
    color: '#b91c1c',
    padding: '0.25rem 0.75rem',
    borderRadius: '0.25rem',
    fontSize: '0.75rem',
    display: 'flex',
    alignItems: 'center'
  },
  flexContainer: {
    display: 'flex',
    flex: 1,
    overflow: 'hidden'
  },
  sidebar: {
    width: '18rem',
    backgroundColor: 'white',
    borderRight: '1px solid #e5e7eb',
    display: 'flex',
    flexDirection: 'column'
  },
  sidebarContent: {
    padding: '1.5rem'
  },
  sidebarHeading: {
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#6b7280',
    textTransform: 'uppercase',
    letterSpacing: '0.05em',
    marginBottom: '0.25rem'
  },
  sidebarText: {
    fontSize: '0.75rem',
    color: '#6b7280',
    marginBottom: '1rem'
  },
  sidebarSection: {
    marginBottom: '1rem'
  },
  sidebarSectionHeader: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: '0.5rem'
  },
  sidebarSectionTitle: {
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#374151'
  },
  sidebarClearButton: {
    fontSize: '0.75rem',
    color: '#2563eb',
    cursor: 'pointer'
  },
  checkboxContainer: {
    display: 'flex',
    alignItems: 'center',
    padding: '0.25rem 0'
  },
  checkbox: {
    height: '1rem',
    width: '1rem',
    color: '#2563eb',
    borderRadius: '0.25rem',
    borderColor: '#d1d5db'
  },
  checkboxLabel: {
    marginLeft: '0.5rem',
    fontSize: '0.875rem',
    color: '#374151'
  },
  inputField: {
    width: '100%',
    border: '1px solid #d1d5db',
    borderRadius: '0.375rem',
    padding: '0.5rem 0.75rem',
    fontSize: '0.875rem'
  },
  sidebarFooter: {
    marginTop: 'auto',
    borderTop: '1px solid #e5e7eb',
    padding: '1rem'
  },
  hideFiltersButton: {
    color: '#6b7280',
    fontSize: '0.875rem',
    cursor: 'pointer'
  },
  mainContent: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden'
  },
  toolbar: {
    backgroundColor: 'white',
    borderBottom: '1px solid #e5e7eb',
    padding: '0.5rem 1rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  toolbarGroup: {
    display: 'flex',
    alignItems: 'center',
    gap: '0.75rem'
  },
  showFiltersButton: {
    color: '#4b5563',
    fontSize: '0.875rem',
    border: '1px solid #d1d5db',
    borderRadius: '0.25rem',
    padding: '0.375rem 0.5rem',
    cursor: 'pointer'
  },
  inputWithButton: {
    display: 'flex',
    alignItems: 'center',
    border: '1px solid #d1d5db',
    borderRadius: '0.375rem',
    overflow: 'hidden'
  },
  inputInGroup: {
    width: '10rem',
    height: '2rem',
    padding: '0.5rem',
    fontSize: '0.875rem',
    border: 'none',
    outline: 'none'
  },
  blueButton: {
    backgroundColor: '#2563eb',
    color: 'white',
    height: '2rem',
    padding: '0 0.75rem',
    fontSize: '0.875rem',
    fontWeight: '500',
    border: 'none',
    cursor: 'pointer'
  },
  disabledButton: {
    backgroundColor: '#d1d5db',
    cursor: 'not-allowed'
  },
  borderButton: {
    color: '#4b5563',
    fontSize: '0.875rem',
    border: '1px solid #d1d5db',
    borderRadius: '0.25rem',
    padding: '0.375rem 0.75rem',
    cursor: 'pointer'
  },
  rowCount: {
    fontSize: '0.875rem',
    color: '#6b7280'
  },
  tableContainer: {
    flex: 1,
    overflow: 'auto'
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse'
  },
  tableHeaderRow: {
    backgroundColor: '#f9fafb'
  },
  tableHeaderCell: {
    position: 'sticky',
    top: 0,
    backgroundColor: '#f9fafb',
    borderBottom: '1px solid #e5e7eb',
    padding: '0.75rem',
    textAlign: 'left',
    fontSize: '0.75rem',
    fontWeight: '500',
    color: '#6b7280',
    textTransform: 'uppercase',
    letterSpacing: '0.05em',
    cursor: 'pointer'
  },
  rowNumberHeader: {
    width: '3.5rem',
    textAlign: 'center',
    zIndex: 20
  },
  headerContent: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  sortIcon: {
    marginLeft: '0.25rem',
    color: '#9ca3af'
  },
  deleteButton: {
    color: '#9ca3af',
    cursor: 'pointer',
    marginLeft: '0.5rem',
    opacity: 0,
    outline: 'none'
  },
  rowNumberCell: {
    borderBottom: '1px solid #e5e7eb',
    backgroundColor: '#f9fafb',
    padding: '0.5rem',
    fontSize: '0.75rem',
    fontWeight: '500',
    color: '#6b7280',
    textAlign: 'center',
    position: 'sticky',
    left: 0,
    zIndex: 10
  },
  tableCell: {
    borderBottom: '1px solid #e5e7eb',
    padding: 0
  },
  cellActive: {
    backgroundColor: 'rgba(59, 130, 246, 0.05)',
    outline: '2px solid #60a5fa'
  },
  cellInput: {
    width: '100%',
    height: '100%',
    padding: '0.5rem',
    border: 'none',
    outline: 'none',
    backgroundColor: 'transparent'
  },
  deleteRowCell: {
    width: '2.5rem',
    padding: 0,
    borderBottom: '1px solid #e5e7eb',
    position: 'relative'
  },
  deleteRowButton: {
    position: 'absolute',
    inset: 0,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: '#9ca3af',
    cursor: 'pointer',
    opacity: 0
  },
  emptyMessage: {
    padding: '3rem 0',
    textAlign: 'center',
    color: '#6b7280',
    borderBottom: '1px solid #e5e7eb'
  },
  llmPanel: {
    borderTop: '1px solid #e5e7eb',
    backgroundColor: 'white'
  },
  llmHeader: {
    backgroundColor: '#f9fafb',
    borderBottom: '1px solid #e5e7eb',
    padding: '0.5rem 1rem',
    display: 'flex',
    alignItems: 'center'
  },
  llmTitle: {
    fontSize: '0.75rem',
    fontWeight: '500',
    color: '#6b7280',
    textTransform: 'uppercase',
    letterSpacing: '0.05em'
  },
  llmContent: {
    padding: '1rem',
    display: 'grid',
    gridTemplateColumns: 'repeat(12, minmax(0, 1fr))',
    gap: '1rem'
  },
  col3: {
    gridColumn: 'span 3 / span 3'
  },
  col7: {
    gridColumn: 'span 7 / span 7'
  },
  col2: {
    gridColumn: 'span 2 / span 2',
    display: 'flex',
    alignItems: 'flex-end'
  },
  fieldLabel: {
    display: 'block',
    fontSize: '0.75rem',
    fontWeight: '500',
    color: '#6b7280',
    marginBottom: '0.25rem'
  },
  select: {
    width: '100%',
    border: '1px solid #d1d5db',
    borderRadius: '0.375rem',
    padding: '0.375rem 0.75rem',
    fontSize: '0.875rem'
  },
  deleteIcon: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    backgroundColor: '#f3f4f6',
    color: '#6b7280',
    cursor: 'pointer',
    fontSize: '14px',
    marginLeft: '4px',
    border: 'none',
    outline: 'none',
  },
  deleteIconHover: {
    backgroundColor: '#fee2e2',
    color: '#ef4444',
  },
  actionColumn: {
    width: '100px',
    textAlign: 'right',
  },
};

const Spreadsheet = () => {
  // Sample initial data
  const initialData = [
    { id: 1, firstName: 'John', lastName: 'Doe', major: 'Computer Science' },
    { id: 2, firstName: 'Jane', lastName: 'Smith', major: 'Biology' },
    { id: 3, firstName: 'Mike', lastName: 'Johnson', major: 'Engineering' },
    { id: 4, firstName: 'Sara', lastName: 'Williams', major: 'Psychology' },
    { id: 5, firstName: 'Alex', lastName: 'Brown', major: 'Business' },
  ];

  const [data, setData] = useState(initialData);
  const [columns, setColumns] = useState(['firstName', 'lastName', 'major']);
  const [visibleColumns, setVisibleColumns] = useState(['firstName', 'lastName', 'major']);
  const [newColumnName, setNewColumnName] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedColumn, setSelectedColumn] = useState('major');
  const [prompt, setPrompt] = useState('Classify if this major makes them an engineer or non-engineer');
  const [apiStatus, setApiStatus] = useState('idle');
  const [errorMessage, setErrorMessage] = useState('');
  const [activeCell, setActiveCell] = useState(null);
  const [showFilters, setShowFilters] = useState(true);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });
  const [searchTerm, setSearchTerm] = useState('');
  const tableRef = useRef(null);

  // Check API health on mount
  useEffect(() => {
    const checkApiHealth = async () => {
      try {
        const response = await axios.get('http://localhost:5000/health');
        if (response.data.status === 'healthy') {
          setApiStatus('success');
        }
      } catch (error) {
        console.error('API health check failed:', error);
        setApiStatus('error');
        setErrorMessage('Backend API not available. LLM features will not work.');
      }
    };

    checkApiHealth();
  }, []);

  const handleCellChange = (rowId, column, value) => {
    setData(data.map(row =>
      row.id === rowId ? { ...row, [column]: value } : row
    ));
  };

  const addRow = () => {
    const newRow = {
      id: Math.max(...data.map(row => row.id), 0) + 1
    };
    columns.forEach(col => {
      newRow[col] = '';
    });
    setData([...data, newRow]);
  };

  const deleteRow = (rowId) => {
    setData(data.filter(row => row.id !== rowId));
  };

  const toggleColumnVisibility = (column) => {
    if (visibleColumns.includes(column)) {
      // Don't allow hiding all columns
      if (visibleColumns.length > 1) {
        setVisibleColumns(visibleColumns.filter(col => col !== column));
      }
    } else {
      setVisibleColumns([...visibleColumns, column]);
    }
  };

  const resetColumnVisibility = () => {
    setVisibleColumns([...columns]);
  };

  // Ensure selectedColumn is visible or select first visible column
  useEffect(() => {
    if (!visibleColumns.includes(selectedColumn) && visibleColumns.length > 0) {
      setSelectedColumn(visibleColumns[0]);
    }
  }, [visibleColumns, selectedColumn]);

  const addColumn = () => {
    if (newColumnName && !columns.includes(newColumnName)) {
      const newColumns = [...columns, newColumnName];
      setColumns(newColumns);
      setVisibleColumns([...visibleColumns, newColumnName]); // Make new column visible by default
      setData(data.map(row => ({
        ...row,
        [newColumnName]: ''
      })));
      setNewColumnName('');
    }
  };

  const deleteColumn = (column) => {
    if (columns.length > 1) {
      const newColumns = columns.filter(col => col !== column);
      setColumns(newColumns);
      setVisibleColumns(visibleColumns.filter(col => col !== column)); // Remove from visible columns too

      // Remove the column from each row
      setData(data.map(row => {
        const newRow = { ...row };
        delete newRow[column];
        return newRow;
      }));
    }
  };

  const generateColumnWithLLM = async () => {
    setIsGenerating(true);
    try {
      const response = await axios.post('http://localhost:5000/generate-column', {
        columnData: data.map(row => row[selectedColumn]),
        prompt
      });

      // Create a descriptive name for the new column based on the selected column and prompt
      const promptWords = prompt.split(' ').slice(0, 3).join('_');
      const newColumnName = `${selectedColumn}_${promptWords}`.substring(0, 25);

      if (response.data && response.data.results) {
        // Add new column if it doesn't exist
        if (!columns.includes(newColumnName)) {
          setColumns(prevColumns => [...prevColumns, newColumnName]);
          setVisibleColumns(prevVisible => [...prevVisible, newColumnName]);
        }

        // Update data with generated values
        setData(data.map((row, index) => ({
          ...row,
          [newColumnName]: response.data.results[index] || ''
        })));

        // Show success message
        setApiStatus('success');
        setTimeout(() => setApiStatus('idle'), 3000);
      }
    } catch (error) {
      console.error('Error generating column:', error);
      setErrorMessage('Failed to generate column. Check if backend is running.');
      setApiStatus('error');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCellFocus = (rowId, column) => {
    setActiveCell({ rowId, column });
  };

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  // Filter data based on search term
  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return data;

    return data.filter(row => {
      return columns.some(column => {
        const value = String(row[column] || '').toLowerCase();
        return value.includes(searchTerm.toLowerCase());
      });
    });
  }, [data, columns, searchTerm]);

  // Sort the filtered data
  const sortedData = useMemo(() => {
    let sortableItems = [...filteredData];
    if (sortConfig.key) {
      sortableItems.sort((a, b) => {
        const aValue = a[sortConfig.key] || '';
        const bValue = b[sortConfig.key] || '';

        if (aValue < bValue) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableItems;
  }, [filteredData, sortConfig]);

  const getSortDirectionIcon = (column) => {
    if (sortConfig.key !== column) return '↕';
    return sortConfig.direction === 'ascending' ? '↑' : '↓';
  };

  return (
    <div style={styles.container}>
      {/* Top navigation bar */}
      <div style={styles.header}>
        <h1 style={styles.headerTitle}>Spreadsheet LLM</h1>
        <div>
          {apiStatus === 'error' && (
            <div style={styles.errorMessage}>
              {errorMessage}
            </div>
          )}
        </div>
      </div>

      <div style={styles.flexContainer}>
        {/* Left sidebar - Clay style */}
        {showFilters && (
          <div style={styles.sidebar}>
            <div style={styles.sidebarContent}>
              <h2 style={styles.sidebarHeading}>Filters</h2>
              <p style={styles.sidebarText}>Apply filters to refine your data</p>

              {/* Filter sections - Clay style */}
              <div style={styles.sidebarSection}>
                <div style={styles.sidebarSectionHeader}>
                  <h3 style={styles.sidebarSectionTitle}>Columns to include</h3>
                  <button
                    onClick={resetColumnVisibility}
                    style={styles.sidebarClearButton}
                  >
                    Show All
                  </button>
                </div>
                <div style={{ maxHeight: '10rem', overflowY: 'auto' }}>
                  {columns.map(column => (
                    <div key={column} style={styles.checkboxContainer}>
                      <input
                        type="checkbox"
                        id={`col-${column}`}
                        checked={visibleColumns.includes(column)}
                        onChange={() => toggleColumnVisibility(column)}
                        style={styles.checkbox}
                      />
                      <label htmlFor={`col-${column}`} style={styles.checkboxLabel}>
                        {column}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <div style={{ ...styles.sidebarSection, paddingTop: '1rem', marginTop: '1rem', borderTop: '1px solid #e5e7eb' }}>
                <div style={styles.sidebarSectionHeader}>
                  <h3 style={styles.sidebarSectionTitle}>Keywords</h3>
                  {searchTerm && (
                    <button
                      onClick={() => setSearchTerm('')}
                      style={styles.sidebarClearButton}
                    >
                      Clear
                    </button>
                  )}
                </div>
                <div style={{ marginBottom: '0.75rem' }}>
                  <input
                    type="text"
                    placeholder="Filter by keywords..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    style={styles.inputField}
                  />
                </div>
                {searchTerm && (
                  <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                    Found {filteredData.length} of {data.length} rows
                  </div>
                )}
              </div>
            </div>

            <div style={styles.sidebarFooter}>
              <button
                onClick={() => setShowFilters(false)}
                style={styles.hideFiltersButton}
              >
                ← Hide Filters
              </button>
            </div>
          </div>
        )}

        {/* Main content */}
        <div style={styles.mainContent}>
          {/* Toolbar - Clay style */}
          <div style={styles.toolbar}>
            <div style={styles.toolbarGroup}>
              {!showFilters && (
                <button
                  onClick={() => setShowFilters(true)}
                  style={styles.showFiltersButton}
                >
                  Filters
                </button>
              )}

              <div style={styles.inputWithButton}>
                <input
                  type="text"
                  value={newColumnName}
                  onChange={(e) => setNewColumnName(e.target.value)}
                  style={styles.inputInGroup}
                  placeholder="New column name"
                />
                <button
                  onClick={addColumn}
                  disabled={!newColumnName.trim()}
                  style={!newColumnName.trim() ? { ...styles.blueButton, ...styles.disabledButton } : styles.blueButton}
                >
                  Add
                </button>
              </div>

              <button
                onClick={addRow}
                style={styles.borderButton}
              >
                Add Row
              </button>

              {data.length > 0 && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    if (window.confirm('Delete all rows? This cannot be undone.')) {
                      setData([]);
                    }
                  }}
                  style={{...styles.borderButton, color: '#ef4444'}}
                  type="button"
                >
                  Clear All
                </button>
              )}
            </div>

            <div>
              <span style={styles.rowCount}>
                {sortedData.length} {sortedData.length === 1 ? 'row' : 'rows'}
                {searchTerm && ` (filtered from ${data.length})`}
              </span>
            </div>
          </div>

          {/* Clay Style Table */}
          <div style={styles.tableContainer}>
            <table ref={tableRef} style={styles.table}>
              <thead>
                <tr style={styles.tableHeaderRow}>
                  <th style={{ ...styles.tableHeaderCell, ...styles.rowNumberHeader }}>
                    #
                  </th>
                  {visibleColumns.map((column) => (
                    <th
                      key={column}
                      style={styles.tableHeaderCell}
                      onClick={() => requestSort(column)}
                    >
                      <div style={styles.headerContent}>
                        <span>{column}</span>
                        <span style={{ display: 'flex', alignItems: 'center' }}>
                          <span style={styles.sortIcon}>{getSortDirectionIcon(column)}</span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              e.preventDefault();
                              if (window.confirm(`Delete column "${column}"?`)) {
                                deleteColumn(column);
                              }
                            }}
                            style={styles.deleteIcon}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.backgroundColor = '#fee2e2';
                              e.currentTarget.style.color = '#ef4444';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.backgroundColor = '#f3f4f6';
                              e.currentTarget.style.color = '#6b7280';
                            }}
                            title="Delete column"
                            type="button"
                          >
                            ✕
                          </button>
                        </span>
                      </div>
                    </th>
                  ))}
                  <th style={{ ...styles.tableHeaderCell, width: '100px' }}></th>
                </tr>
              </thead>
              <tbody>
                {sortedData.length > 0 ? (
                  sortedData.map((row, rowIdx) => (
                    <tr key={row.id} style={{ ':hover': { backgroundColor: 'rgba(59, 130, 246, 0.1)' } }}>
                      <td style={styles.rowNumberCell}>
                        {rowIdx + 1}
                      </td>
                      {visibleColumns.map(column => (
                        <td
                          key={`${row.id}-${column}`}
                          style={
                            activeCell?.rowId === row.id && activeCell?.column === column
                              ? { ...styles.tableCell, ...styles.cellActive }
                              : styles.tableCell
                          }
                        >
                          <input
                            type="text"
                            value={row[column] || ''}
                            onChange={(e) => handleCellChange(row.id, column, e.target.value)}
                            onFocus={() => handleCellFocus(row.id, column)}
                            style={styles.cellInput}
                            placeholder=""
                          />
                        </td>
                      ))}
                      <td style={{...styles.tableCell, ...styles.actionColumn}}>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            e.preventDefault();
                            if (window.confirm('Delete this row?')) {
                              deleteRow(row.id);
                            }
                          }}
                          style={{
                            padding: '2px 8px',
                            color: '#6b7280',
                            backgroundColor: '#f3f4f6',
                            border: '1px solid #d1d5db',
                            borderRadius: '4px',
                            fontSize: '12px',
                            cursor: 'pointer',
                            display: 'inline-flex',
                            alignItems: 'center'
                          }}
                          title="Delete row"
                          type="button"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={visibleColumns.length + 2} style={styles.emptyMessage}>
                      <p>No data available. Add a row to get started.</p>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* LLM Generator Panel - Clay style */}
          <div style={styles.llmPanel}>
            <div style={styles.llmHeader}>
              <h3 style={styles.llmTitle}>Generate New Column from Data</h3>
            </div>
            <div style={styles.llmContent}>
              <div style={styles.col3}>
                <label htmlFor="sourceColumn" style={styles.fieldLabel}>
                  Source Column
                </label>
                <select
                  id="sourceColumn"
                  value={selectedColumn}
                  onChange={(e) => setSelectedColumn(e.target.value)}
                  style={styles.select}
                >
                  {visibleColumns.map(col => (
                    <option key={col} value={col}>{col}</option>
                  ))}
                </select>
              </div>

              <div style={styles.col7}>
                <label htmlFor="prompt" style={styles.fieldLabel}>
                  Prompt
                </label>
                <input
                  id="prompt"
                  type="text"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  style={styles.inputField}
                  placeholder="Describe what you want to generate..."
                />
              </div>

              <div style={styles.col2}>
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    generateColumnWithLLM();
                  }}
                  disabled={isGenerating}
                  style={isGenerating ? { ...styles.blueButton, ...styles.disabledButton, width: '100%' } : { ...styles.blueButton, width: '100%' }}
                  type="button"
                >
                  {isGenerating ? 'Generating...' : 'Generate New Column'}
                </button>
              </div>
            </div>
          </div>

          {/* Success message */}
          {apiStatus === 'success' && (
            <div style={{
              backgroundColor: '#ecfdf5',
              border: '1px solid #10b981',
              color: '#047857',
              padding: '0.5rem 0.75rem',
              borderRadius: '0.375rem',
              fontSize: '0.875rem',
              display: 'flex',
              alignItems: 'center',
              position: 'absolute',
              bottom: '1rem',
              right: '1rem',
              zIndex: 50,
            }}>
              Column generated successfully!
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Spreadsheet;
========================================
<<< FILE END: src\components\Spreadsheet.jsx

>>> FILE START: src\index.css [type=css]
========================================
/* Basic reset and global styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body, #root {
  height: 100%;
  width: 100%;
}

body {
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  color: #1f2937;
  background-color: #f9fafb;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.5;
}

/* Basic form styling */
input, select, textarea {
  display: block;
  width: 100%;
  padding: 0.5rem 0.75rem;
  font-size: 0.875rem;
  line-height: 1.25rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  color: #1f2937;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

button {
  cursor: pointer;
}

button:disabled {
  cursor: not-allowed;
  opacity: 0.7;
}

/* Table styles */
table {
  width: 100%;
  border-collapse: collapse;
}

th {
  text-align: left;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: #6b7280;
  font-weight: 600;
  padding: 0.75rem;
  border-bottom: 1px solid #e5e7eb;
}

td {
  padding: 0.75rem;
  border-bottom: 1px solid #e5e7eb;
}

/* Focus styles */
*:focus {
  outline: none;
}

/* Custom scrollbar for a modern look */
@media (min-width: 768px) {
  ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 10px;
    border: 3px solid #f1f1f1;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
}

/* Animations */
.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Responsive table styles */
.spreadsheet-table {
  width: 100%;
  border-collapse: collapse;
}

.spreadsheet-table th {
  position: sticky;
  top: 0;
  z-index: 10;
  background-color: #f9fafb;
  text-align: left;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: #6b7280;
  font-weight: 500;
}

.spreadsheet-cell {
  transition: background-color 0.15s;
}

.spreadsheet-cell-hover {
  background-color: #eff6ff;
}

.spreadsheet-cell-editable:hover {
  background-color: #f3f4f6;
}

/* Toast notifications */
.toast {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  background-color: white;
  border-left-width: 4px;
  z-index: 50;
  transform: translateY(0);
  transition: all 0.3s;
  min-width: 250px;
  max-width: 450px;
}

.toast-success {
  border-left-color: #10b981;
}

.toast-error {
  border-left-color: #ef4444;
}

.toast-info {
  border-left-color: #3b82f6;
}

========================================
<<< FILE END: src\index.css

>>> FILE START: tailwind.config.js [type=js]
========================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
========================================
<<< FILE END: tailwind.config.js
